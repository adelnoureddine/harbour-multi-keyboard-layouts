/*
 * Copyright (C) 2020 Adel Noureddine
 *
 * Contact: Adel Noureddine
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * Neither the name of Jolla Ltd nor the names of its contributors may be
 * used to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

import QtQuick 2.0
import com.jolla.keyboard 1.0
import Sailfish.Silica 1.0
import com.meego.maliitquick 1.0
import ".."

KeyboardLayout {
	splitSupported: true
	type: "CTL"

    KeyboardRow {
        //CharacterKey { caption: "1"; captionShifted: "1"; symView: "üòä"; symView2: "üòÆ" }

        FunctionKey {
            icon.source: keyboard.inSymView ? "image://theme/icon-splus-left" : ""
            implicitWidth: punctuationKeyWidth
            background.visible: false

            showPopper: !keyboard.inSymView
            separator: SeparatorState.HiddenSeparator

            onClicked: {
                if (keyboard.inSymView) {
                    MInputMethodQuick.sendKey(Qt.Key_Left, 0, "", Maliit.KeyClick)
                }
            }

            text: keyboard.inSymView ? "" : "1"

            Text {
                text: keyboard.inSymView ? "" : "1"
                color: Theme.primaryColor;
                font.pixelSize: Theme.fontSizeLarge
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.verticalCenter: parent.verticalCenter
            }
        }

        CharacterKey { caption: "2"; captionShifted: "2"; symView: "üòä"; symView2: "üòê" }
        CharacterKey { caption: "3"; captionShifted: "3"; symView: "üòâ"; symView2: "üòõ" }
        CharacterKey { caption: "4"; captionShifted: "4"; symView: "üòò"; symView2: "‚ù§" }
        CharacterKey { caption: "5"; captionShifted: "5"; symView: "üòÉ"; symView2: "üòï" }
        CharacterKey { caption: "6"; captionShifted: "6"; symView: "üëç"; symView2: "üòû" }
        CharacterKey { caption: "7"; captionShifted: "7"; symView: "üòç"; symView2: "üò¢" }
        CharacterKey { caption: "8"; captionShifted: "8"; symView: "üòÇ"; symView2: "üò≠" }
        CharacterKey { caption: "9"; captionShifted: "9"; symView: "üòÅ"; symView2: "üò†" }
        CharacterKey { caption: "‚Ç¨"; symView: "üòé"; symView2: "üëã"; accents: "$¬£\uFDFC\u20BA"; accentsShifted: "$¬£\uFDFC\u20BA" }

        FunctionKey {
            icon.source: keyboard.inSymView ? "image://theme/icon-splus-right" : ""
            implicitWidth: punctuationKeyWidth
            background.visible: false

            showPopper: !keyboard.inSymView
            separator: SeparatorState.HiddenSeparator

            onClicked: {
                if (keyboard.inSymView) {
                    MInputMethodQuick.sendKey(Qt.Key_Right, 0, "", Maliit.KeyClick)
                }
            }

            text: keyboard.inSymView ? "" : "0"

            Text {
                text: keyboard.inSymView ? "" : "0"
                color: Theme.primaryColor;
                font.pixelSize: Theme.fontSizeLarge
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.verticalCenter: parent.verticalCenter
            }
        }

        //CharacterKey { caption: "0"; captionShifted: "0"; symView: "üòÇ"; symView2: "üò¥" }
    }

	KeyboardRow {
		CharacterKey { caption: "ÿ∂"; symView: "Ÿ°"; symView2: "‚Ç¨" }
		CharacterKey { caption: "ÿµ"; symView: "Ÿ¢"; symView2: "¬£" }
		CharacterKey { caption: "ÿ´"; symView: "Ÿ£"; symView2: "$" }
		CharacterKey { caption: "ŸÇ"; symView: "Ÿ§"; symView2: "¬•"; accents: "⁄®⁄ß" }
		CharacterKey { caption: "ŸÅ"; symView: "Ÿ•"; symView2: "‚Çπ"; accents: "⁄•⁄§⁄¢" }
		CharacterKey { caption: "ÿ∫"; symView: "Ÿ¶"; symView2: "%" }
		CharacterKey { caption: "ÿπ"; symView: "Ÿß"; symView2: "<" }
		CharacterKey { caption: "Ÿá"; symView: "Ÿ®"; symView2: ">" }
		CharacterKey { caption: "ÿÆ"; symView: "Ÿ©"; symView2: "[" }
		CharacterKey { caption: "ÿ≠"; symView: "Ÿ†"; symView2: "]" }
		CharacterKey { caption: "ÿ¨"; symView: "\u0651"; symView2: "\u0652"; accents: "⁄Ü" }
	}

	KeyboardRow {
		splitIndex: 5

		CharacterKey { caption: "ÿ¥";  symView: "*"; symView2: "`"; accents: "⁄ú"}
		CharacterKey { caption: "ÿ≥"; symView: "#"; symView2: "^" }
		CharacterKey { caption: "Ÿä"; symView: "+"; symView2: "|"; accents: "ÿ¶Ÿâ" }
		CharacterKey { caption: "ÿ®"; symView: "-"; symView2: "_"; accents: "Ÿæ" }
		CharacterKey { caption: "ŸÑ"; symView: "="; symView2: "¬ß" }
		CharacterKey { caption: "ÿß"; symView: "("; symView2: "{"; accents: "ÿ¢ÿ°ÿ•ÿ£Ÿ±\u0670" }
		CharacterKey { caption: "ÿ™"; symView: ")"; symView2: "}" }
		CharacterKey { caption: "ŸÜ"; symView: "!"; symView2: "¬°" }
		CharacterKey { caption: "ŸÖ"; symView: "\u064C"; symView2: "\u064F" }
		CharacterKey { caption: "ŸÉ"; symView: "\u064B"; symView2: "\u064E"; accents: "⁄Ø⁄©" }
		CharacterKey { caption: "ÿ©"; symView: "\u064D"; symView2: "\u0650" }
	}

	KeyboardRow {
		splitIndex: 5

		CharacterKey {
			showPopper: !attributes.inSymView
			separator: showPopper ? SeparatorState.AutomaticSeparator : SeparatorState.HiddenSeparator
			showHighlight: showPopper

			caption: "ÿ°"; symView: "1/2"; symView2: "2/2"; accents: "ÿ•ÿ£ÿ¶ÿ§"
			text: !attributes.inSymView ? caption : ""

			Rectangle {
				color: Theme.primaryColor
				opacity: parent.pressed ? 0.2 : 0.1
				visible: attributes.inSymView
				radius: geometry.keyRadius
				anchors {
					fill: parent
					margins: Theme.paddingMedium
				}
			}

			onClicked: {
				if (keyboard.inSymView) {
					keyboard.inSymView2 = !keyboard.inSymView2
				}
			}
		}

		CharacterKey { caption: "ÿ∏"; symView: "&"; symView2: "Ÿ™" }
		CharacterKey { caption: "ÿ∑"; symView: "/"; symView2: "\"" }
		CharacterKey { caption: "ÿ∞"; symView: "\\"; symView2: "‚Äú" }
		CharacterKey { caption: "ÿØ"; symView: "'"; symView2: "‚Äù" }
		CharacterKey { caption: "ÿ≤"; symView: ";"; symView2: "‚Äû"; accents: "⁄ò" }
		CharacterKey { caption: "ÿ±"; symView: ":"; symView2: "~" }
		CharacterKey { caption: "Ÿà"; symView: "ÿå"; symView2: "ÿõ"; accents: "ÿ§" }
		CharacterKey { caption: "Ÿâ"; symView: "ÿü"; symView2: "?"; accents: "ÿ¶" }

		BackspaceKey {}
	}

	KeyboardRow {
		splitIndex: 4

		SymbolKey {
            implicitWidth: symbolKeyWidthNarrow * 0.8
		}
		ContextAwareCommaKey {
            implicitWidth: punctuationKeyWidth
		}
		SpacebarKey {}
		SpacebarKey {
			active: splitActive
			languageLabel: ""
		}
		CharacterKey {
			caption: "."
			captionShifted: "."
            implicitWidth: punctuationKeyWidth
			fixedWidth: !splitActive
			separator: SeparatorState.HiddenSeparator
			accents: "!?ÿü"
		}
		EnterKey {
            implicitWidth: functionKeyWidth * 0.8
		}
	}
}
